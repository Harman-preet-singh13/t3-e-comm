generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Address {
    address_id      String?
    address_details String?
    phone_number    String?
    userId          String
    createdAt       DateTime @default(now())
    Order           Order?   @relation(fields: [address_id], references: [id], onDelete: Cascade)
    User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId])
    @@index([address_id])
    @@index([userId])
}

model Wishlist {
    id          String   @id @default(uuid())
    product_id String?
    product_title String?
    product_image String?
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([createdAt, id])
    @@index([userId])
}

model Order {
    id         String   @id @default(uuid())
    product_id String?
    product_title String?
    product_image String?
    userId     String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    address Address[]
    User    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([createdAt, id])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    addresses Address[]
    orders    Order[]
    wishlists Wishlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
